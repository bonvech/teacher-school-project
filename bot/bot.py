import asyncio
import requests
import json
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

with open('token.txt') as file:
    API_TOKEN = file.readline().rstrip()
    FOLDER_ID = file.readline().rstrip()
    YANDEX_GPT_KEY = file.readline().rstrip()

URL = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion'
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_questions = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question_text TEXT NOT NULL,
            category TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_answers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            question_id INTEGER NOT NULL,
            user_answer TEXT NOT NULL,
            ai_feedback TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (question_id) REFERENCES questions (id)
        )
    ''')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
    cursor.execute("SELECT COUNT(*) FROM questions")
    if cursor.fetchone()[0] == 0:
        try:
            with open('questions.txt', 'r', encoding='utf-8') as f:
                questions = [line.strip() for line in f if line.strip()]
            
            for question in questions:
                # –†–∞–∑–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if '|' in question:
                    question_text, category = question.split('|', 1)
                    cursor.execute("INSERT INTO questions (question_text, category) VALUES (?, ?)", 
                                 (question_text.strip(), category.strip()))
                else:
                    cursor.execute("INSERT INTO questions (question_text) VALUES (?)", (question.strip(),))
            
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")
        except FileNotFoundError:
            print("–§–∞–π–ª questions.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def get_random_question():
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, question_text FROM questions ORDER BY RANDOM() LIMIT 1")
    question = cursor.fetchone()
    conn.close()
    return question

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_answer(user_id, question_id, user_answer, ai_feedback=None):
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_answers (user_id, question_id, user_answer, ai_feedback)
        VALUES (?, ?, ?, ?)
    ''', (user_id, question_id, user_answer, ai_feedback))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_answers(user_id):
    conn = sqlite3.connect('questions.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT q.question_text, ua.user_answer, ua.ai_feedback, ua.created_at
        FROM user_answers ua
        JOIN questions q ON ua.question_id = q.id
        WHERE ua.user_id = ?
        ORDER BY ua.created_at DESC
    ''', (user_id,))
    answers = cursor.fetchall()
    conn.close()
    return answers

def yandex_gpt(message, system_prompt=None):
    try:
        headers = {
            'Authorization': f'Api-Key {YANDEX_GPT_KEY}',
            'x-folder-id': FOLDER_ID,
            'Content-Type': 'application/json'
        }
        
        if system_prompt is None:
            system_prompt = '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
        
        data = {
            'modelUri': f'gpt://{FOLDER_ID}/yandexgpt/latest',
            'completionOptions': {
                'stream': False,
                'temperature': 0.6,
                'maxTokens': 2000
            },
            'messages': [
                {
                    'role': 'system',
                    'text': system_prompt
                },
                {
                    'role': 'user',
                    'text': message
                }
            ]
        }
        
        response = requests.post(URL, headers=headers, json=data, timeout=30)
        
        if response.status_code != 200:
            error_msg = f"API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}"
            try:
                error_data = response.json()
                if 'message' in error_data.get('error', {}):
                    error_msg += f": {error_data['error']['message']}"
            except:
                error_msg += f": {response.text}"
            return {"error": error_msg}
        
        return response.json()
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def analyze_user_answer(question, user_answer):
    system_prompt = '''–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. 
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –¥–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.
    –û—Ü–µ–Ω–∏–≤–∞–π –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞, –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å. 
    –ü—Ä–µ–¥–ª–æ–∂–∏, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.'''
    
    prompt = f"""
    –í–æ–ø—Ä–æ—Å: {question}
    –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer}
    
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É.
    """
    
    return yandex_gpt(prompt, system_prompt)

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_db()
    bot = Bot(token=API_TOKEN)
    await dp.start_polling(bot)

@dp.message(Command('start'))
async def cmd_start(msg: Message):
    welcome_text = f'''–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!
    
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/question - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É
/analyze - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é!'''
    await msg.answer(welcome_text)

@dp.message(Command('question'))
async def cmd_question(msg: Message):
    question_data = get_random_question()
    if question_data:
        question_id, question_text = question_data
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_last_questions[msg.from_user.id] = (question_id, question_text)
        await msg.answer(f"–í–æ–ø—Ä–æ—Å: {question_text}\n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç, –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é!")
    else:
        await msg.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–∞–π–ª questions.txt")

@dp.message(Command('history'))
async def cmd_history(msg: Message):
    answers = get_user_answers(msg.from_user.id)
    if not answers:
        await msg.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
        return
    
    response = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n\n"
    for i, (question, answer, feedback, date) in enumerate(answers[:5], 1):
        response += f"{i}. ‚ùì –í–æ–ø—Ä–æ—Å: {question}\n"
        response += f"   üí¨ –í–∞—à –æ—Ç–≤–µ—Ç: {answer[:100]}...\n"
        if feedback:
            response += f"   üìù –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: {feedback[:100]}...\n"
        response += f"   üìÖ {date[:10]}\n\n"
    
    await msg.answer(response)

@dp.message(Command('analyze'))
async def cmd_analyze(msg: Message):
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–í–æ–ø—Ä–æ—Å: [—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å]\n–û—Ç–≤–µ—Ç: [—Ç–≤–æ–π –æ—Ç–≤–µ—Ç]\n\n–ò —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é!")

@dp.message()
async def handle_user_response(msg: Message):
    try:
        user_text = msg.text.strip()
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–í–æ–ø—Ä–æ—Å:" –∏ "–û—Ç–≤–µ—Ç:" - —ç—Ç–æ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
        if user_text.startswith("–í–æ–ø—Ä–æ—Å:") and "–û—Ç–≤–µ—Ç:" in user_text:
            parts = user_text.split("–û—Ç–≤–µ—Ç:")
            if len(parts) == 2:
                question = parts[0].replace("–í–æ–ø—Ä–æ—Å:", "").strip()
                user_answer = parts[1].strip()
                
                await msg.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç...")
                
                result = analyze_user_answer(question, user_answer)
                
                if 'error' in result:
                    await msg.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {result["error"]}')
                    return
                
                if 'result' in result and 'alternatives' in result['result'] and result['result']['alternatives']:
                    analysis = result['result']['alternatives'][0]['message']['text']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É (question_id = 0 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
                    save_user_answer(msg.from_user.id, 0, user_answer, analysis)
                    
                    response = f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{analysis}"
                    await msg.answer(response)
                else:
                    await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞.")
            
            return

        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        if msg.from_user.id not in user_last_questions:
            await msg.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é /question")
            return
            
        await msg.bot.send_chat_action(msg.chat.id, 'typing')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question_id, question_text = user_last_questions[msg.from_user.id]
        
        result = analyze_user_answer(question_text, user_text)
        
        if 'error' in result:
            await msg.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {result["error"]}')
            return
        
        if 'result' in result and 'alternatives' in result['result'] and result['result']['alternatives']:
            analysis = result['result']['alternatives'][0]['message']['text']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É
            save_user_answer(msg.from_user.id, question_id, user_text, analysis)
            
            response = f"‚ùì –í–æ–ø—Ä–æ—Å: {question_text}\n\n"
            response += f"üí¨ –í–∞—à –æ—Ç–≤–µ—Ç: {user_text}\n\n"
            response += f"üìù –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –ò–ò:\n{analysis}"
            
            await msg.answer(response)
            
            # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–µ —Å—á–∏—Ç–∞–ª—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å
            # –ò–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å
            # del user_last_questions[msg.from_user.id]
            
        else:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")
            
    except Exception as e:
        await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.')
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
